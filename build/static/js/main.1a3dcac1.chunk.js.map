{"version":3,"sources":["axios.js","Row.js","requests.js","Banner.js","Nav.js","App.js","reportWebVitals.js","index.js"],"names":["instance","axios","create","baseURL","Row","title","fetchURL","isLargeRow","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","get","request","console","log","data","results","fetchData","className","map","movie","onClick","movieTrailer","name","original_name","then","url","urlParams","URLSearchParams","URL","search","catch","error","handleClick","src","poster_path","backdrop_path","alt","id","videoId","opts","height","width","playerVars","autoplay","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","str","n","setMovie","Math","floor","random","length","style","backgroundSize","backgroundImage","backgroundPosition","overview","substr","Nav","show","handleShow","window","addEventListener","scrollY","removeEventListener","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1a3dcac1.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\n// base URL to make requests to the movie database\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://api.themoviedb.org/3\",\r\n});\r\n\r\nexport default instance;","import React, {useState, useEffect} from 'react';\r\nimport axios from \"./axios\";\r\nimport \"./Row.scss\";\r\nimport YouTube from \"react-youtube\";\r\nimport movieTrailer from \"movie-trailer\";\r\nimport { Component } from \"react\";\r\n\r\n\r\nconst base_URL = \"https://image.tmdb.org/t/p/original/\";\r\n\r\n    function Row({title, fetchURL, isLargeRow}) {\r\n\r\n        const [movies, setMovies] = useState([]);\r\n        const [trailerUrl, setTrailerUrl] = useState(\"\");\r\n       \r\n\r\n        //  a snippet off code which runs based on a specific condition\r\n    useEffect(() => {\r\n    //if [blank], run once wheen the row loads, and dont run again \r\n        async function fetchData(){\r\n            const request = await axios.get(fetchURL);\r\n            //axios.get(fetchURL) does => https://api.themoviedb.org/3/discover/tv?api_key=${API_KEY}&with_networks=213\r\n            console.log(request);\r\n            setMovies(request.data.results);\r\n            return request;\r\n        }\r\n        fetchData();\r\n    }, [fetchURL]);\r\n    \r\n\r\n    const opts = {\r\n        height: \"390\",\r\n        width: \"100%\",\r\n        \r\n        playerVars:{\r\n            autoplay:1,\r\n        },\r\n        \r\n    };\r\n\r\n    \r\n    const handleClick = (movie) => {\r\n        if(trailerUrl) {\r\n            setTrailerUrl('');\r\n        }else {\r\n            movieTrailer(movie?.title || movie?.name || movie?.original_name|| \"\" )\r\n            .then(url => {\r\n\r\n                //https://www.youtube.com/watch?v=Xjbansjnbj\r\n                //will search trailer and take the key part after v\r\n                const urlParams = new URLSearchParams(new URL(url).search);\r\n                setTrailerUrl(urlParams.get('v'));\r\n\r\n            }).catch((error) => console.log(error));\r\n        }\r\n\r\n    };\r\n\r\n\r\n\r\n    console.log(movies);\r\n\r\n        return (\r\n            <div className=\"row\">\r\n                {/* //title */}\r\n                <h2 className=\"row_title\">{title}</h2>\r\n               \r\n\r\n                {/* container => posters */}\r\n            \r\n                    <div className=\"row_posters\">\r\n                      \r\n                       \r\n                            {movies.map(movie => (\r\n                            <img \r\n                                key={movie.id}\r\n                                onClick={() => handleClick(movie)}\r\n                                className={`row_poster ${isLargeRow && \"row_posterLarge\"}`}\r\n                                \r\n                                src={`${base_URL}${isLargeRow ? movie.poster_path : movie.backdrop_path}`} alt={movie.name}/>\r\n                            ))}\r\n\r\n\r\n                       \r\n                       \r\n                    </div>\r\n                        \r\n                       \r\n                \r\n\r\n                {trailerUrl && <YouTube videoId={trailerUrl} opts={opts}/>}\r\n\r\n                \r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\nexport default Row\r\n ","const API_KEY = \"8094d0b990908f87d3ada4d081c24c61\";\r\n\r\nconst requests= {\r\n    fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\r\n    fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\r\n    fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\r\n    fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n    fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n    fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n    fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n    fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\r\n}\r\n\r\nexport default requests;","import React, { useState, useEffect} from 'react';\r\nimport axios from './axios';\r\nimport requests from './requests';\r\nimport './Banner.css';\r\n\r\nfunction Banner() {\r\n\r\n    const [movie,setMovie] = useState([]);\r\n\r\n    useEffect(() => {\r\n        async function fetchData(){\r\n            const request = await axios.get(requests.fetchNetflixOriginals);\r\n            setMovie(\r\n                request.data.results[\r\n                    Math.floor(Math.random() * request.data.results.length - 1)\r\n                ]\r\n            );\r\n            return request;\r\n            \r\n            \r\n        }\r\n        fetchData();\r\n    }, []);\r\n\r\n    console.log(movie);\r\n\r\n    function truncate(str, n) {\r\n        return str?.length > n ? str.substr(0, n-1) + \"...\" :str;\r\n    }\r\n\r\n    \r\n    return ( \r\n       \r\n        /*<<Background image*/\r\n        <header className=\"banner\"\r\n            style={{\r\n                backgroundSize:\"cover\",\r\n                backgroundImage: `url(\r\n                    \"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\"\r\n                    )`,\r\n                    backgroundPosition: \"center center\",\r\n            }}> \r\n            <div className=\"banner_contents\">\r\n\r\n                {/* title */}\r\n                <h1 className=\"banner_title\">\r\n                    {movie?.title || movie?.name || movie?.original_name }\r\n                </h1>\r\n\r\n                {/* 2 buttons */}\r\n                <div className=\"banner_buttons\">\r\n                    <button className=\"banner_button\">Play</button>\r\n                    <button className=\"banner_button\">My List</button>\r\n\r\n                </div>\r\n\r\n                {/* description     */}\r\n                <h1 className=\"banner_description\">\r\n                    {truncate(movie?.overview, 150)}\r\n                </h1>\r\n            </div>\r\n            <div className=\"banner_fadeBottom\"/>\r\n\r\n           \r\n        </header >\r\n    )\r\n}\r\n\r\nexport default Banner\r\n","import React, { useState , useEffect } from 'react';\r\nimport './Nav.css';\r\n\r\nfunction Nav() {\r\n    //nav bar show after scolling 100 in Y axis \r\n    const [show, handleShow] = useState(false);\r\n\r\n    useEffect(() => {\r\n        window.addEventListener(\"scroll\", () => {\r\n            if(window.scrollY > 100) {\r\n                handleShow(true);\r\n            } else handleShow(false);\r\n        });\r\n        return () => {\r\n            window.removeEventListener(\"scroll\");\r\n        };\r\n    }, []);\r\n\r\n     \r\n    return (\r\n        <div className={`nav ${show && \"nav_black\"}`}>\r\n            <img className=\"nav_logo\"\r\n            src=\"https://assets.stickpng.com/images/580b57fcd9996e24bc43c529.png\"\r\n            \r\n            // src2=\"https://upload.wikimedia.org/wikipedia/commons/0/0f/Logo_Netflix.png\"\r\n          \r\n            alt=\"Netflic Logo\"\r\n            />\r\n            <img\r\n            className=\"nav_avatar\"\r\n            src=\"https://mir-s3-cdn-cf.behance.net/project_modules/disp/366be133850498.56ba69ac36858.png\"\r\n            \r\n            alt=\"Netflix Avatar \"/>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Nav\r\n","import React from 'react';\nimport './App.css';\nimport Row from './Row';\nimport requests from './requests';\nimport Banner from './Banner';\nimport Nav from './Nav';\nfunction App() {\n  return (\n    <div className=\"App\">\n     {/* NAV */}\n     <Nav/>\n     {/* Banner */}\n     <Banner/>\n     <Row title=\"NETFLIX ORIGINALS\" fetchURL= {requests.fetchNetflixOriginals}\n     isLargeRow/>\n     <Row title=\"Trending Now\" fetchURL= {requests.fetchTrending}/>\n     <Row title=\"Top Rated\" fetchURL= {requests.fetchTopRated}/>\n     <Row title=\"Action Movies\" fetchURL= {requests.fetchActionMovies}/>\n     <Row title=\"Comedy Movies\" fetchURL= {requests.fetchComedyMovies}/>\n     <Row title=\"Horror Movies\" fetchURL= {requests.fetchHorrorMovies}/>\n     <Row title=\"Romance Movies\" fetchURL= {requests.fetchRomanceMovies}/>\n     <Row title=\"Documentaries\" fetchURL= {requests.fetchDocumentaries}/>\n     \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}