{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\React JS\\\\netflix_clone\\\\src\\\\Row.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport axios from \"./axios\";\nimport \"./Row.css\";\nimport YouTube from \"react-youtube\";\nimport movieTrailer from \"movie-trailer\";\nconst base_URL = \"https://image.tmdb.org/t/p/original/\";\n\nfunction Row({\n  title,\n  fetchURL,\n  isLargeRow\n}) {\n  _s();\n\n  const [movies, setMovies] = useState([]);\n  const [trailerURL, setTrailerUrl] = useState(\"\"); //  a snippet off code which runs based on a specific condition\n\n  useEffect(() => {\n    //if [blank], run once wheen the row loads, and dont run again \n    async function fetchData() {\n      const request = await axios.get(fetchURL); //axios.get(fetchURL) does => https://api.themoviedb.org/3/discover/tv?api_key=${API_KEY}&with_networks=213\n\n      console.log(request);\n      setMovies(request.data.results);\n      return request;\n    }\n\n    fetchData();\n  }, [fetchURL]);\n  const opts = {\n    height: \"390\",\n    width: \"100%\",\n    playerVars: {\n      autoplay: 1\n    }\n  };\n\n  const handleClick = movie => {\n    if (trailerURL) {\n      setTrailerUrl('');\n    } else {\n      movieTrailer((movie === null || movie === void 0 ? void 0 : movie.name) || \"\").then(url => {\n        //https://www.youtube.com/watch?v=Xjbansjnbj\n        //will search trailer and take the key part after v\n        const urlParams = new URLSearchParams(new URL(url).search);\n        setTrailerUrl(urlParams.get('v'));\n      }).catch(error => console.log(error));\n    }\n  };\n\n  console.log(movies);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row_posters\",\n      children: movies.map(movie => /*#__PURE__*/_jsxDEV(\"img\", {\n        className: `row_poster ${isLargeRow && \"row_posterLarge\"}`,\n        src: `${base_URL}${isLargeRow ? movie.poster_path : movie.backdrop_path}`,\n        alt: movie.name\n      }, movie.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this), trailerURL && /*#__PURE__*/_jsxDEV(YouTube, {\n      videoID: trailerURL,\n      opts: opts\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 28\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Row, \"EquWPVz+aAawrI+FxiavTpwDmlQ=\");\n\n_c = Row;\nexport default Row;\n\nvar _c;\n\n$RefreshReg$(_c, \"Row\");","map":{"version":3,"sources":["D:/React JS/netflix_clone/src/Row.js"],"names":["React","useState","useEffect","axios","YouTube","movieTrailer","base_URL","Row","title","fetchURL","isLargeRow","movies","setMovies","trailerURL","setTrailerUrl","fetchData","request","get","console","log","data","results","opts","height","width","playerVars","autoplay","handleClick","movie","name","then","url","urlParams","URLSearchParams","URL","search","catch","error","map","poster_path","backdrop_path","id"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAO,WAAP;AACA,OAAOC,OAAP,MAAoB,eAApB;AACA,OAAOC,YAAP,MAAyB,eAAzB;AAEA,MAAMC,QAAQ,GAAG,sCAAjB;;AAEA,SAASC,GAAT,CAAa;AAACC,EAAAA,KAAD;AAAQC,EAAAA,QAAR;AAAkBC,EAAAA;AAAlB,CAAb,EAA4C;AAAA;;AAEvC,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBX,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACY,UAAD,EAAaC,aAAb,IAA8Bb,QAAQ,CAAC,EAAD,CAA5C,CAHuC,CAKxC;;AACJC,EAAAA,SAAS,CAAC,MAAM;AAChB;AACI,mBAAea,SAAf,GAA0B;AACtB,YAAMC,OAAO,GAAG,MAAMb,KAAK,CAACc,GAAN,CAAUR,QAAV,CAAtB,CADsB,CAEtB;;AACAS,MAAAA,OAAO,CAACC,GAAR,CAAYH,OAAZ;AACAJ,MAAAA,SAAS,CAACI,OAAO,CAACI,IAAR,CAAaC,OAAd,CAAT;AACA,aAAOL,OAAP;AACH;;AACDD,IAAAA,SAAS;AACZ,GAVQ,EAUN,CAACN,QAAD,CAVM,CAAT;AAaA,QAAMa,IAAI,GAAG;AACTC,IAAAA,MAAM,EAAE,KADC;AAETC,IAAAA,KAAK,EAAE,MAFE;AAGTC,IAAAA,UAAU,EAAC;AACPC,MAAAA,QAAQ,EAAC;AADF;AAHF,GAAb;;AASA,QAAMC,WAAW,GAAIC,KAAD,IAAW;AAC3B,QAAGf,UAAH,EAAe;AACXC,MAAAA,aAAa,CAAC,EAAD,CAAb;AACH,KAFD,MAEM;AACFT,MAAAA,YAAY,CAAC,CAAAuB,KAAK,SAAL,IAAAA,KAAK,WAAL,YAAAA,KAAK,CAAEC,IAAP,KAAe,EAAhB,CAAZ,CACCC,IADD,CACMC,GAAG,IAAI;AAET;AACA;AACA,cAAMC,SAAS,GAAG,IAAIC,eAAJ,CAAoB,IAAIC,GAAJ,CAAQH,GAAR,EAAaI,MAAjC,CAAlB;AACArB,QAAAA,aAAa,CAACkB,SAAS,CAACf,GAAV,CAAc,GAAd,CAAD,CAAb;AAEH,OARD,EAQGmB,KARH,CAQUC,KAAD,IAAWnB,OAAO,CAACC,GAAR,CAAYkB,KAAZ,CARpB;AASH;AAEJ,GAfD;;AAiBAnB,EAAAA,OAAO,CAACC,GAAR,CAAYR,MAAZ;AAEI,sBACI;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BAEI;AAAA,gBAAKH;AAAL;AAAA;AAAA;AAAA;AAAA,YAFJ,eAOI;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA,gBAEKG,MAAM,CAAC2B,GAAP,CAAWV,KAAK,iBACjB;AAEA,QAAA,SAAS,EAAG,cAAalB,UAAU,IAAI,iBAAkB,EAFzD;AAGI,QAAA,GAAG,EAAG,GAAEJ,QAAS,GAAEI,UAAU,GAAGkB,KAAK,CAACW,WAAT,GAAuBX,KAAK,CAACY,aAAc,EAH5E;AAG+E,QAAA,GAAG,EAAEZ,KAAK,CAACC;AAH1F,SACKD,KAAK,CAACa,EADX;AAAA;AAAA;AAAA;AAAA,cADC;AAFL;AAAA;AAAA;AAAA;AAAA,YAPJ,EAkBK5B,UAAU,iBAAI,QAAC,OAAD;AAAS,MAAA,OAAO,EAAEA,UAAlB;AAA8B,MAAA,IAAI,EAAES;AAApC;AAAA;AAAA;AAAA;AAAA,YAlBnB;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAwBH;;GAvEQf,G;;KAAAA,G;AAyET,eAAeA,GAAf","sourcesContent":["import React, {useState, useEffect} from 'react';\r\nimport axios from \"./axios\";\r\nimport \"./Row.css\";\r\nimport YouTube from \"react-youtube\";\r\nimport movieTrailer from \"movie-trailer\";\r\n\r\nconst base_URL = \"https://image.tmdb.org/t/p/original/\";\r\n\r\nfunction Row({title, fetchURL, isLargeRow}) {\r\n\r\n     const [movies, setMovies] = useState([]);\r\n     const [trailerURL, setTrailerUrl] = useState(\"\");\r\n\r\n    //  a snippet off code which runs based on a specific condition\r\nuseEffect(() => {\r\n//if [blank], run once wheen the row loads, and dont run again \r\n    async function fetchData(){\r\n        const request = await axios.get(fetchURL);\r\n        //axios.get(fetchURL) does => https://api.themoviedb.org/3/discover/tv?api_key=${API_KEY}&with_networks=213\r\n        console.log(request);\r\n        setMovies(request.data.results);\r\n        return request;\r\n    }\r\n    fetchData();\r\n}, [fetchURL]);\r\n \r\n\r\nconst opts = {\r\n    height: \"390\",\r\n    width: \"100%\",\r\n    playerVars:{\r\n        autoplay:1,\r\n    },\r\n     \r\n};\r\n\r\nconst handleClick = (movie) => {\r\n    if(trailerURL) {\r\n        setTrailerUrl('');\r\n    }else {\r\n        movieTrailer(movie?.name || \"\")\r\n        .then(url => {\r\n\r\n            //https://www.youtube.com/watch?v=Xjbansjnbj\r\n            //will search trailer and take the key part after v\r\n            const urlParams = new URLSearchParams(new URL(url).search);\r\n            setTrailerUrl(urlParams.get('v'));\r\n\r\n        }).catch((error) => console.log(error));\r\n    }\r\n\r\n};\r\n\r\nconsole.log(movies);\r\n\r\n    return (\r\n        <div className=\"row\">\r\n            {/* //title */}\r\n            <h2>{title}</h2>\r\n\r\n    \r\n            {/* container => posters */}\r\n\r\n            <div className=\"row_posters\">\r\n\r\n                {movies.map(movie => (\r\n                <img \r\n                key={movie.id}\r\n                className={`row_poster ${isLargeRow && \"row_posterLarge\"}`}\r\n                    src={`${base_URL}${isLargeRow ? movie.poster_path : movie.backdrop_path}`} alt={movie.name}/>\r\n                ))}\r\n\r\n            </div>\r\n\r\n            {trailerURL && <YouTube videoID={trailerURL} opts={opts}/>}\r\n\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Row\r\n "]},"metadata":{},"sourceType":"module"}