{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\React JS\\\\netflix_clone\\\\src\\\\Row.js\";\nimport React, { useState, useEffect } from 'react';\nimport axios from \"./axios\";\nimport \"./Row.css\";\nimport YouTube from \"react-youtube\";\nimport movieTrailer from \"movie-trailer\";\nimport { Component } from \"react\";\nconst base_URL = \"https://image.tmdb.org/t/p/original/\";\n\nclass application extends Component {\n  constructor() {\n    // super()\n    this.scroll = this.scroll.bind(this);\n  }\n\n  scroll(direction) {\n    let far = $('.image-container').width() / 2 * direction;\n    let pos = $('.image-container').scrollLeft() + far;\n    $('.image-container').animate({\n      scrollLeft: pos\n    }, 1000);\n  }\n\n  Row({\n    title,\n    fetchURL,\n    isLargeRow\n  }) {\n    const [movies, setMovies] = useState([]);\n    const [trailerUrl, setTrailerUrl] = useState(\"\"); //  a snippet off code which runs based on a specific condition\n\n    useEffect(() => {\n      //if [blank], run once wheen the row loads, and dont run again \n      async function fetchData() {\n        const request = await axios.get(fetchURL); //axios.get(fetchURL) does => https://api.themoviedb.org/3/discover/tv?api_key=${API_KEY}&with_networks=213\n\n        console.log(request);\n        setMovies(request.data.results);\n        return request;\n      }\n\n      fetchData();\n    }, [fetchURL]);\n    const opts = {\n      height: \"390\",\n      width: \"100%\",\n      playerVars: {\n        autoplay: 1\n      }\n    };\n\n    const handleClick = movie => {\n      if (trailerUrl) {\n        setTrailerUrl('');\n      } else {\n        movieTrailer((movie === null || movie === void 0 ? void 0 : movie.title) || (movie === null || movie === void 0 ? void 0 : movie.name) || (movie === null || movie === void 0 ? void 0 : movie.original_name) || \"\").then(url => {\n          //https://www.youtube.com/watch?v=Xjbansjnbj\n          //will search trailer and take the key part after v\n          const urlParams = new URLSearchParams(new URL(url).search);\n          setTrailerUrl(urlParams.get('v'));\n        }).catch(error => console.log(error));\n      }\n    };\n\n    console.log(movies);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"row_title\",\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row_posters\",\n        children: [/*#__PURE__*/_jsxDEV(\"a\", {\n          className: \"prev\",\n          onClick: this.scroll.bind(null, -1),\n          children: \"\\u276E\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 25\n        }, this), movies.map(movie => /*#__PURE__*/_jsxDEV(\"img\", {\n          onClick: () => handleClick(movie),\n          className: `row_poster ${isLargeRow && \"row_posterLarge\"}`,\n          src: `${base_URL}${isLargeRow ? movie.poster_path : movie.backdrop_path}`,\n          alt: movie.name\n        }, movie.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 29\n        }, this)), /*#__PURE__*/_jsxDEV(\"a\", {\n          className: \"next\",\n          onClick: this.scroll.bind(null, 1),\n          children: \"\\u276F\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 21\n      }, this), trailerUrl && /*#__PURE__*/_jsxDEV(YouTube, {\n        videoId: trailerUrl,\n        opts: opts\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 32\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Row;","map":{"version":3,"sources":["D:/React JS/netflix_clone/src/Row.js"],"names":["React","useState","useEffect","axios","YouTube","movieTrailer","Component","base_URL","application","constructor","scroll","bind","direction","far","$","width","pos","scrollLeft","animate","Row","title","fetchURL","isLargeRow","movies","setMovies","trailerUrl","setTrailerUrl","fetchData","request","get","console","log","data","results","opts","height","playerVars","autoplay","handleClick","movie","name","original_name","then","url","urlParams","URLSearchParams","URL","search","catch","error","map","poster_path","backdrop_path","id"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\r\nimport axios from \"./axios\";\r\nimport \"./Row.css\";\r\nimport YouTube from \"react-youtube\";\r\nimport movieTrailer from \"movie-trailer\";\r\nimport { Component } from \"react\";\r\n\r\n\r\nconst base_URL = \"https://image.tmdb.org/t/p/original/\";\r\n\r\nclass application extends Component{\r\n    constructor(){\r\n        // super()\r\n        this.scroll = this.scroll.bind(this)\r\n        }\r\n    \r\n    \r\n    scroll(direction){\r\n        let far = $( '.image-container' ).width()/2*direction;\r\n        let pos = $('.image-container').scrollLeft() + far;\r\n        $('.image-container').animate( { scrollLeft: pos }, 1000)\r\n        }\r\n\r\n     Row({title, fetchURL, isLargeRow}) {\r\n\r\n        const [movies, setMovies] = useState([]);\r\n        const [trailerUrl, setTrailerUrl] = useState(\"\");\r\n\r\n        //  a snippet off code which runs based on a specific condition\r\n    useEffect(() => {\r\n    //if [blank], run once wheen the row loads, and dont run again \r\n        async function fetchData(){\r\n            const request = await axios.get(fetchURL);\r\n            //axios.get(fetchURL) does => https://api.themoviedb.org/3/discover/tv?api_key=${API_KEY}&with_networks=213\r\n            console.log(request);\r\n            setMovies(request.data.results);\r\n            return request;\r\n        }\r\n        fetchData();\r\n    }, [fetchURL]);\r\n    \r\n\r\n    const opts = {\r\n        height: \"390\",\r\n        width: \"100%\",\r\n        \r\n        playerVars:{\r\n            autoplay:1,\r\n        },\r\n        \r\n    };\r\n\r\n    \r\n    const handleClick = (movie) => {\r\n        if(trailerUrl) {\r\n            setTrailerUrl('');\r\n        }else {\r\n            movieTrailer(movie?.title || movie?.name || movie?.original_name|| \"\" )\r\n            .then(url => {\r\n\r\n                //https://www.youtube.com/watch?v=Xjbansjnbj\r\n                //will search trailer and take the key part after v\r\n                const urlParams = new URLSearchParams(new URL(url).search);\r\n                setTrailerUrl(urlParams.get('v'));\r\n\r\n            }).catch((error) => console.log(error));\r\n        }\r\n\r\n    };\r\n\r\n\r\n\r\n    console.log(movies);\r\n\r\n        return (\r\n            <div className=\"row\">\r\n                {/* //title */}\r\n                <h2 className=\"row_title\">{title}</h2>\r\n\r\n        \r\n                {/* container => posters */}\r\n            \r\n                    <div className=\"row_posters\">\r\n                        <a className=\"prev\" onClick={this.scroll.bind(null,-1)}>&#10094;</a>\r\n                    \r\n\r\n                            {movies.map(movie => (\r\n                            <img \r\n                            key={movie.id}\r\n                            onClick={() => handleClick(movie)}\r\n                            className={`row_poster ${isLargeRow && \"row_posterLarge\"}`}\r\n                                src={`${base_URL}${isLargeRow ? movie.poster_path : movie.backdrop_path}`} alt={movie.name}/>\r\n                            ))}\r\n\r\n                        <a className=\"next\" onClick={this.scroll.bind(null,1)}>&#10095;</a>\r\n\r\n                \r\n                    </div>\r\n                \r\n\r\n                {trailerUrl && <YouTube videoId={trailerUrl} opts={opts}/>}\r\n\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Row\r\n "]},"metadata":{},"sourceType":"module"}