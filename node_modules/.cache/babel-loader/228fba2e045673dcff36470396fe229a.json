{"ast":null,"code":"import _regeneratorRuntime from\"D:/React JS/netflix_clone/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"D:/React JS/netflix_clone/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"D:/React JS/netflix_clone/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import React,{useState,useEffect}from'react';import axios from\"./axios\";import\"./Row.scss\";import YouTube from\"react-youtube\";import movieTrailer from\"movie-trailer\";import{Component}from\"react\";var base_URL=\"https://image.tmdb.org/t/p/original/\";function Row(_ref){var title=_ref.title,fetchURL=_ref.fetchURL,isLargeRow=_ref.isLargeRow;var _useState=useState([]),_useState2=_slicedToArray(_useState,2),movies=_useState2[0],setMovies=_useState2[1];var _useState3=useState(\"\"),_useState4=_slicedToArray(_useState3,2),trailerUrl=_useState4[0],setTrailerUrl=_useState4[1];//  a snippet off code which runs based on a specific condition\nuseEffect(function(){//if [blank], run once wheen the row loads, and dont run again \nfunction fetchData(){return _fetchData.apply(this,arguments);}function _fetchData(){_fetchData=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var request;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return axios.get(fetchURL);case 2:request=_context.sent;//axios.get(fetchURL) does => https://api.themoviedb.org/3/discover/tv?api_key=${API_KEY}&with_networks=213\nconsole.log(request);setMovies(request.data.results);return _context.abrupt(\"return\",request);case 6:case\"end\":return _context.stop();}}},_callee);}));return _fetchData.apply(this,arguments);}fetchData();},[fetchURL]);var opts={height:\"390\",width:\"100%\",playerVars:{autoplay:1}};var handleClick=function handleClick(movie){if(trailerUrl){setTrailerUrl('');}else{movieTrailer((movie===null||movie===void 0?void 0:movie.title)||(movie===null||movie===void 0?void 0:movie.name)||(movie===null||movie===void 0?void 0:movie.original_name)||\"\").then(function(url){//https://www.youtube.com/watch?v=Xjbansjnbj\n//will search trailer and take the key part after v\nvar urlParams=new URLSearchParams(new URL(url).search);setTrailerUrl(urlParams.get('v'));}).catch(function(error){return console.log(error);});}};console.log(movies);return/*#__PURE__*/_jsxs(\"div\",{className:\"row\",children:[/*#__PURE__*/_jsx(\"h2\",{className:\"row_title\",children:title}),/*#__PURE__*/_jsx(\"div\",{className:\"row_posters\",children:movies.map(function(movie){return/*#__PURE__*/_jsx(\"img\",{onClick:function onClick(){return handleClick(movie);},className:\"row_poster \".concat(isLargeRow&&\"row_posterLarge\"),src:\"\".concat(base_URL).concat(isLargeRow?movie.poster_path:movie.backdrop_path),alt:movie.name},movie.id);})}),trailerUrl&&/*#__PURE__*/_jsx(YouTube,{videoId:trailerUrl,opts:opts})]});}export default Row;","map":{"version":3,"sources":["D:/React JS/netflix_clone/src/Row.js"],"names":["React","useState","useEffect","axios","YouTube","movieTrailer","Component","base_URL","Row","title","fetchURL","isLargeRow","movies","setMovies","trailerUrl","setTrailerUrl","fetchData","get","request","console","log","data","results","opts","height","width","playerVars","autoplay","handleClick","movie","name","original_name","then","url","urlParams","URLSearchParams","URL","search","catch","error","map","poster_path","backdrop_path","id"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\r\nimport axios from \"./axios\";\r\nimport \"./Row.scss\";\r\nimport YouTube from \"react-youtube\";\r\nimport movieTrailer from \"movie-trailer\";\r\nimport { Component } from \"react\";\r\n\r\n\r\nconst base_URL = \"https://image.tmdb.org/t/p/original/\";\r\n\r\n    function Row({title, fetchURL, isLargeRow}) {\r\n\r\n        const [movies, setMovies] = useState([]);\r\n        const [trailerUrl, setTrailerUrl] = useState(\"\");\r\n       \r\n\r\n        //  a snippet off code which runs based on a specific condition\r\n    useEffect(() => {\r\n    //if [blank], run once wheen the row loads, and dont run again \r\n        async function fetchData(){\r\n            const request = await axios.get(fetchURL);\r\n            //axios.get(fetchURL) does => https://api.themoviedb.org/3/discover/tv?api_key=${API_KEY}&with_networks=213\r\n            console.log(request);\r\n            setMovies(request.data.results);\r\n            return request;\r\n        }\r\n        fetchData();\r\n    }, [fetchURL]);\r\n    \r\n\r\n    const opts = {\r\n        height: \"390\",\r\n        width: \"100%\",\r\n        \r\n        playerVars:{\r\n            autoplay:1,\r\n        },\r\n        \r\n    };\r\n\r\n    \r\n    const handleClick = (movie) => {\r\n        if(trailerUrl) {\r\n            setTrailerUrl('');\r\n        }else {\r\n            movieTrailer(movie?.title || movie?.name || movie?.original_name|| \"\" )\r\n            .then(url => {\r\n\r\n                //https://www.youtube.com/watch?v=Xjbansjnbj\r\n                //will search trailer and take the key part after v\r\n                const urlParams = new URLSearchParams(new URL(url).search);\r\n                setTrailerUrl(urlParams.get('v'));\r\n\r\n            }).catch((error) => console.log(error));\r\n        }\r\n\r\n    };\r\n\r\n\r\n\r\n    console.log(movies);\r\n\r\n        return (\r\n            <div className=\"row\">\r\n                {/* //title */}\r\n                <h2 className=\"row_title\">{title}</h2>\r\n               \r\n\r\n                {/* container => posters */}\r\n            \r\n                    <div className=\"row_posters\">\r\n                      \r\n                       \r\n                            {movies.map(movie => (\r\n                            <img \r\n                                key={movie.id}\r\n                                onClick={() => handleClick(movie)}\r\n                                className={`row_poster ${isLargeRow && \"row_posterLarge\"}`}\r\n                                \r\n                                src={`${base_URL}${isLargeRow ? movie.poster_path : movie.backdrop_path}`} alt={movie.name}/>\r\n                            ))}\r\n\r\n\r\n                       \r\n                       \r\n                    </div>\r\n                        \r\n                       \r\n                \r\n\r\n                {trailerUrl && <YouTube videoId={trailerUrl} opts={opts}/>}\r\n\r\n                \r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\nexport default Row\r\n "]},"metadata":{},"sourceType":"module"}